@model CSharp.Models.NewReceptionModel
@{
  ViewBag.Title = "Nouvelle réception";
}
<h2>@ViewBag.Title</h2>

@using(Html.BeginForm()) {
@Html.AntiForgeryToken()

<div class="form-horizontal">
    <hr />
    @Html.ValidationSummary(true, "", new { @class = "text-danger" })
    <div class="form-group">
        @Html.LabelFor(model => model.Name, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.Name, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.Name, "", new { @class = "text-danger" })
        </div>
    </div>
    <div class="form-group">
        @Html.LabelFor(model => model.Date, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.Date, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.Date, "", new { @class = "text-danger" })
        </div>
    </div>
    <div class="form-group">
        @Html.LabelFor(model => model.BookingClosingDate, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.BookingClosingDate, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.BookingClosingDate, "", new { @class = "text-danger" })
        </div>
    </div>
    <div class="form-group">
        @Html.LabelFor(model => model.Capacity, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.DropDownListFor(model => model.Capacity, (IEnumerable<SelectListItem>)ViewBag.SelectListCapacity, new { @class = "form-control" })
            @Html.ValidationMessageFor(model => model.Capacity, "", new { @class = "text-danger" })
        </div>
    </div>
    <div class="form-group">
        @Html.LabelFor(model => model.SeatsPerTable, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.DropDownListFor(model => model.SeatsPerTable, (IEnumerable<SelectListItem>)ViewBag.SelectListSeatsPerTable, new { @class = "form-control" })
            @Html.ValidationMessageFor(model => model.SeatsPerTable, "", new { @class = "text-danger" })
        </div>
    </div>
    <div class="form-group">
        @Html.LabelFor(model => model.StartersId, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-8">
            <select class="form-control" id="StartersIdList"></select>
        </div>
        <div class="col-md-2">
            <button class="form-control btn btn-default adddish" id="StartersIdAdd">Ajouter</button>
        </div>
        <div class="col-md-offset-2 col-md-10" id="StartersIdContainer">
            @Html.ValidationMessageFor(model => model.StartersId, "", new { @class = "text-danger" })
        </div>
    </div>
    <div class="form-group">
        @Html.LabelFor(model => model.MainCoursesId, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-8">
            <select class="form-control" id="MainCoursesIdList"></select>
        </div>
        <div class="col-md-2">
            <button class="form-control btn btn-default adddish" id="MainCoursesIdAdd">Ajouter</button>
        </div>
        <div class="col-md-offset-2 col-md-10" id="MainCoursesIdContainer">
            @Html.ValidationMessageFor(model => model.MainCoursesId, "", new { @class = "text-danger" })
        </div>
    </div>
    <div class="form-group">
        @Html.LabelFor(model => model.DessertsId, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-8">
            <select class="form-control" id="DessertsIdList"></select>
        </div>
        <div class="col-md-2">
            <button class="form-control btn btn-default adddish" id="DessertsIdAdd">Ajouter</button>
        </div>
        <div class="col-md-offset-2 col-md-10" id="DessertsIdContainer">
            @Html.ValidationMessageFor(model => model.DessertsId, "", new { @class = "text-danger" })
        </div>
    </div>
    <div class="form-group">
        <div class="col-md-offset-2 col-md-10">
            <input type="submit" value="Créer" class="btn btn-default" />
        </div>
    </div>
</div>
}
<div>
    @Html.ActionLink("Retour à la liste", "Index")
</div>
@section Scripts {
    @Scripts.Render("~/bundles/jqueryui")
    @Scripts.Render("~/bundles/jqueryval")
    <script type="text/javascript">
        $(function () {
            var selectSeatsPerTable = $("#SeatsPerTable");
            var sliderSeatsPerTable = $("<div id='slider'></div>").insertAfter(selectSeatsPerTable).slider({
                min: 0,
                max: @ViewBag.SelectListSeatsPerTable.Length -1,
                range: "min",
                value: selectSeatsPerTable[0].selectedIndex,
                slide: function (event, ui) {
                    selectSeatsPerTable[0].selectedIndex = ui.value;
                }
            });
            $("#SeatsPerTable").change(function () {
                SeatsPerTable.slider("value", this.selectedIndex);
            });
            var selectCapacity = $("#Capacity");
            var sliderCapacity = $("<div id='slider'></div>").insertAfter(selectCapacity).slider({
                min: 0,
                max: @ViewBag.SelectListCapacity.Length -1,
                range: "min",
                value: selectCapacity[0].selectedIndex,
                slide: function (event, ui) {
                    selectCapacity[0].selectedIndex = ui.value;
                }
            });
            $("#Capacity").change(function () {
                slider.slider("value", this.selectedIndex);
            });
            $("#Date").datetimepicker({
                lang: 'fr',
                formatDate: 'd/m/Y',
                format: 'd/m/Y H:i',
                minDate: 0,
                step: 30,
                onClose: function (ct) {
                    if ($("#BookingClosingDate").val() === '') {
                        ct.setDate(ct.getDate() - 1);
                        var DoM = twoDigit(ct.getDate());
                        var Mon = twoDigit(ct.getMonth() + 1);
                        var Yea = ct.getFullYear();
                        var Hou = twoDigit(ct.getHours());
                        var Min = twoDigit(ct.getMinutes());
                        $("#BookingClosingDate").val(DoM + '/' + Mon + '/' + Yea + ' ' + Hou + ':' + Min)
                    }
                }
            });
            $("#BookingClosingDate").datetimepicker({
                lang: 'fr',
                formatDate: 'd/m/Y',
                format: 'd/m/Y H:i',
                minDate: 0,
                step: 30,
                onShow: function (ct) {
                    this.setOptions({
                        maxDate: $('#Date').val() ? $('#Date').val().substring(0,10) : false
                    });
                }
            });
            populateSelect('Starter', 'StartersIdList');
            populateSelect('MainDish', 'MainCoursesIdList');
            populateSelect('Dessert', 'DessertsIdList');
            $("#StartersIdAdd").click(function () {
                selectDish('StartersIdList', 'StartersIdContainer', 'StartersId')
                return false;
            });
            $("#MainCoursesIdAdd").click(function () {
                selectDish('MainCoursesIdList', 'MainCoursesIdContainer', 'MainCoursesId')
                return false;
            });
            $("#DessertsIdAdd").click(function () {
                selectDish('DessertsIdList', 'DessertsIdContainer', 'DessertsId')
                return false;
            });
            $('#Name').tooltip({
                content: "Le nom de votre réception doit être unique par date.",
                items: "input",
                position: { my: "left bottom-24", at: "left up" }
            });
            $('#BookingClosingDate').tooltip({
                content: "La date de clôture des inscriptions doit être inférieure ou égale à la date de la réception.",
                items: "input",
                position: { my: "left bottom-24", at: "left up" }
            });
            $('.adddish').tooltip({
                content: "Cliquez ici pour ajouter le plat sélectionné à la liste.",
                items: "button",
                position: { my: "right bottom-24", at: "right up" }
            });
        });
        function selectDish(listId, containerId, inputName) {
            var value = $('#' + listId).val();
            var text = $('#' + listId + ' option:selected').text();
            if (text !== '') {
                $('#' + containerId).append('<p class="form-control-static">' + text + '</p>');
                $('#' + containerId).append('<input type="hidden" value="' + value + '" name="' + inputName + '[]" />');
                $('#' + listId + ' option:selected').remove();
            }
        }
        function populateSelect(type, id) {
            $.ajax({
                data: {'target':'Select','type':type},
                type: "GET",
                url: '@Url.Content("~/Api/Dis")',
                success: function (result) {
                    $.each(result, function (idx, item) {
                        $('#' + id).append('<option value="' + item.Value + '">' + item.Text + '</option>');
                    })
                }
            });
        }
        function twoDigit(num) {
            if (num < 10) {
                num = '0' + num;
            }
            return num;
        }
    </script>
}
@section Styles{
    @Styles.Render("~/Content/JQueryUI/css")
}